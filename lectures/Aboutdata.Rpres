Tools of Data Science
========================================================
author: Louis Luangkesorn
date: January 2014

The Data Science Venn Diagram
=============================
left:40%
The primary colors of data
  - Hacking skills, 
  - Math and statistics knowledge, and 
  - Substantive expertise.

***

![Drew Conway Data Science](resources/Data_Science_VD.png)

Hacking skills
==============
type:section

-  Programming language - *R*
-  Integrated Development Environment - *R Studio*
-  Source code version control - *Git*

R
==============
type: subsection

R
=====

-  Environment for statistical computing
-  Programming language
-  Open source - Growth in features is developed by users

Benefits of R
=============

-  Programming language based implementation means very little is hidden.
-  Implementation of all methods as scripts means that analysis is reproducable, even on new data sets.
-  Open source means that researchers develop new methods in R and create a new package to disseminate it.
-  Many visualization and data processing methods have been implemented as R packages.  R packages are indexed on **CRAN**
-  Able to access code written in Java, C, C++, Fortran, and Python from R.

Difficulties of R
=================

-  Programming language means that there is a learning curve at the beginning.
-  Syntax is very different for those who know only Algol based (C/C++/Java/C#) languages.
-  Package interfaces are not consistant, learning to use a new package is often like learning to use a new software tool.
-  Text based interface means it is often difficult to get started.

Rattle
======
left:60%

-  Data mining GUI for R.
-  Importing Rattle automatically imports a range of data mining and data import libraries.
-  GUI saves your session as R scripts.  Use Rattle to start analysis, then edit the session to modify the analysis.

***

![Rattle CSV import screen](resources/rattle-main-audit.png)


R Studio
=============
type: subsection

R Studio
========
left:60%

- IDE for R
- Includes editor, console, workspace, plots.
- Integrates file manager, project manager, version control
- Code completion, command history

***

![R Studio Workbench](resources/rstudio-workbench.png)

Markdown and Sweave
===================
left:60%

- Markdown and Sweave integrates text and R code.
- Maintain documentation on the problem, data, methods, and interpretation along with the data processing and implementation of methods.
- Convert to HTML, PDF, or slides.

***

![R Studio Workbench](resources/rstudio-pdf.png)


Git
========
left:60%

- Distributed Version Control System (DVCS).
- Saves history of changes so you can return to any saved state.
- Coordinates changes when multiple people are working on the same project.

***

![R Studio Workbench](resources/rstudio-vcs_history.png)

Math and Statistics
===================
type:section

R
===

- Most statistical and data analysis methods have been implemented as R packages.
- Installed using `install.packages()` command, or **Tools -> Install Packages** in R-Studio.
- `ggplot` for data visualization.
- `tm` for text manipulation

Rattle
======
-  Data mining interface for R
-  Installing `rattle` automatically installs a large number of data mining and data processing packages.
  - Includes`arules`, `biclust`, `e1071`, `nnet`, `randomforest`, `rpart`, `weightedKmeans`, `pmml`
  
ggplot
======

-  Graphics package
-  Based on *Grammer of graphics*
-  Instead of having different commands for different types of plots, have a unified functional interface that takes different sets of options to produce different plots.
-  Very easy to try different visualizations on the same data set.
  
Substantive areas
=================
type:section

Substantive knowledge
=====================

- Tools allow you to perform an analysis, substantive knowledge tells you what questions you are trying to answer.
- Understand your data, the environment that produced the data, the meaning of the data elements.
- Know methods used in your field
  - **CRAN Task Views** can help with implementations of subject specific models.


Git: Version control
====================
type: section

Version control
===============
left:60%
-  Distributed Version Control Systems (DVCS) enable tracking of changes to text based files (e.g. code files).
-  By `commit`ing changes at frequent milestones, you can use DVCS to return to a working version of the code at any point in time.
-  DVCS enable teams to work on the same code base simultaneously, as it assists in reconsiling team members work.

***

![Git workflow](resources/git_workflow.png)


Version control terms
=====================

-  repository - The version control history of the project.
-  working directory - The files you do your actual work on.
-  master - The main branch of the project.
-  branch - Work done off of the main branch of the project.  
-  merge - Reconsiling a master and a branch
-  remote - A repository other than the directory you do your work on.
-  fork - A copy of a repository created so that a developer can work separately from the main team.  Later, a *pull request* can be made to integrate the changes.


Git basics
==========

Tasks that you need to be able to do

- `git init` - Initialize a repository
- `git clone` - Clone (copy) a remote repository
- `git add` - *Stage* changes - add changes to be tracked in a repository
- `git commit` - Take changes and commits them to the project history
- `git status` - Show the state of the working directory and the staged changes.
- `git fetch` - Downloads updates from a remote repository (but does not change your working directory)
- `git pull` - Download changes from remote repository and merges changes into the working directory.
- `git push` - Uploads committed changes to the remote repository.



